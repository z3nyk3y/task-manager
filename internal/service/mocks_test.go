// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/z3nyk3y/task-manager/internal/models"
)

// newMocktaskRepo creates a new instance of mocktaskRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMocktaskRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *mocktaskRepo {
	mock := &mocktaskRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mocktaskRepo is an autogenerated mock type for the taskRepo type
type mocktaskRepo struct {
	mock.Mock
}

type mocktaskRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *mocktaskRepo) EXPECT() *mocktaskRepo_Expecter {
	return &mocktaskRepo_Expecter{mock: &_m.Mock}
}

// FetchTasks provides a mock function for the type mocktaskRepo
func (_mock *mocktaskRepo) FetchTasks(ctx context.Context, numberOfTasks int) ([]models.Task, error) {
	ret := _mock.Called(ctx, numberOfTasks)

	if len(ret) == 0 {
		panic("no return value specified for FetchTasks")
	}

	var r0 []models.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]models.Task, error)); ok {
		return returnFunc(ctx, numberOfTasks)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []models.Task); ok {
		r0 = returnFunc(ctx, numberOfTasks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, numberOfTasks)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mocktaskRepo_FetchTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchTasks'
type mocktaskRepo_FetchTasks_Call struct {
	*mock.Call
}

// FetchTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - numberOfTasks int
func (_e *mocktaskRepo_Expecter) FetchTasks(ctx interface{}, numberOfTasks interface{}) *mocktaskRepo_FetchTasks_Call {
	return &mocktaskRepo_FetchTasks_Call{Call: _e.mock.On("FetchTasks", ctx, numberOfTasks)}
}

func (_c *mocktaskRepo_FetchTasks_Call) Run(run func(ctx context.Context, numberOfTasks int)) *mocktaskRepo_FetchTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mocktaskRepo_FetchTasks_Call) Return(tasks []models.Task, err error) *mocktaskRepo_FetchTasks_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *mocktaskRepo_FetchTasks_Call) RunAndReturn(run func(ctx context.Context, numberOfTasks int) ([]models.Task, error)) *mocktaskRepo_FetchTasks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTask provides a mock function for the type mocktaskRepo
func (_mock *mocktaskRepo) UpdateTask(ctx context.Context, tasks models.Task) error {
	ret := _mock.Called(ctx, tasks)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Task) error); ok {
		r0 = returnFunc(ctx, tasks)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mocktaskRepo_UpdateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTask'
type mocktaskRepo_UpdateTask_Call struct {
	*mock.Call
}

// UpdateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - tasks models.Task
func (_e *mocktaskRepo_Expecter) UpdateTask(ctx interface{}, tasks interface{}) *mocktaskRepo_UpdateTask_Call {
	return &mocktaskRepo_UpdateTask_Call{Call: _e.mock.On("UpdateTask", ctx, tasks)}
}

func (_c *mocktaskRepo_UpdateTask_Call) Run(run func(ctx context.Context, tasks models.Task)) *mocktaskRepo_UpdateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.Task
		if args[1] != nil {
			arg1 = args[1].(models.Task)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mocktaskRepo_UpdateTask_Call) Return(err error) *mocktaskRepo_UpdateTask_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mocktaskRepo_UpdateTask_Call) RunAndReturn(run func(ctx context.Context, tasks models.Task) error) *mocktaskRepo_UpdateTask_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTasksStatus provides a mock function for the type mocktaskRepo
func (_mock *mocktaskRepo) UpdateTasksStatus(ctx context.Context, task []models.Task, status models.TaskStatus) error {
	ret := _mock.Called(ctx, task, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTasksStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []models.Task, models.TaskStatus) error); ok {
		r0 = returnFunc(ctx, task, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mocktaskRepo_UpdateTasksStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTasksStatus'
type mocktaskRepo_UpdateTasksStatus_Call struct {
	*mock.Call
}

// UpdateTasksStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - task []models.Task
//   - status models.TaskStatus
func (_e *mocktaskRepo_Expecter) UpdateTasksStatus(ctx interface{}, task interface{}, status interface{}) *mocktaskRepo_UpdateTasksStatus_Call {
	return &mocktaskRepo_UpdateTasksStatus_Call{Call: _e.mock.On("UpdateTasksStatus", ctx, task, status)}
}

func (_c *mocktaskRepo_UpdateTasksStatus_Call) Run(run func(ctx context.Context, task []models.Task, status models.TaskStatus)) *mocktaskRepo_UpdateTasksStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []models.Task
		if args[1] != nil {
			arg1 = args[1].([]models.Task)
		}
		var arg2 models.TaskStatus
		if args[2] != nil {
			arg2 = args[2].(models.TaskStatus)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *mocktaskRepo_UpdateTasksStatus_Call) Return(err error) *mocktaskRepo_UpdateTasksStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mocktaskRepo_UpdateTasksStatus_Call) RunAndReturn(run func(ctx context.Context, task []models.Task, status models.TaskStatus) error) *mocktaskRepo_UpdateTasksStatus_Call {
	_c.Call.Return(run)
	return _c
}
